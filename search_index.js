var documenterSearchIndex = {"docs":
[{"location":"#BlochSphereBigFloat.jl-Documentation","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.jl Documentation","text":"","category":"section"},{"location":"#Requirements","page":"BlochSphereBigFloat.jl Documentation","title":"Requirements","text":"","category":"section"},{"location":"","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.jl Documentation","text":"This package requires the CoordinateSystems.jl package to be installed.","category":"page"},{"location":"#Installation","page":"BlochSphereBigFloat.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.jl Documentation","text":"] add git@github.com:Fhoeddinghaus/BlochSphereBigFloat.jl.git","category":"page"},{"location":"","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.jl Documentation","text":"or ","category":"page"},{"location":"","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.jl Documentation","text":"] add https://github.com/Fhoeddinghaus/BlochSphereBigFloat.jl.git","category":"page"},{"location":"#PulseSequenceRandomizedRotations-submodule","page":"BlochSphereBigFloat.jl Documentation","title":"PulseSequenceRandomizedRotations submodule","text":"","category":"section"},{"location":"","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.jl Documentation","text":"This packages contains a submodule PulseSequenceRandomizedRotations that provides functions to simulate and visualize randomized rotation sequences on the Bloch sphere. See the PulseSequenceRandomizedRotations documentation for more details.","category":"page"},{"location":"#Index","page":"BlochSphereBigFloat.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.jl Documentation","text":"","category":"page"},{"location":"#API","page":"BlochSphereBigFloat.jl Documentation","title":"API","text":"","category":"section"},{"location":"#BlochSphereBigFloat.PauliX","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.PauliX","text":"PauliX\n\nThe Pauli-X matrix.\n\n\n\n\n\n","category":"constant"},{"location":"#BlochSphereBigFloat.PauliY","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.PauliY","text":"PauliY\n\nThe Pauli-Y matrix.\n\n\n\n\n\n","category":"constant"},{"location":"#BlochSphereBigFloat.PauliZ","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.PauliZ","text":"PauliZ\n\nThe Pauli-Z matrix.\n\n\n\n\n\n","category":"constant"},{"location":"#BlochSphereBigFloat.SingleQubitState","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.SingleQubitState","text":"mutable struct SingleQubitState <: StaticArrays.FieldVector{2, Complex{BigFloat}}\n\nDefines a single qubit state in the form |ψ⟩ = a|0⟩ + b|1⟩, where ψ = (a,b)ᵀ. The state is normalized and the global phase is adjusted such that Im(a) == 0. The state can be constructed from complex numbers, real numbers, or vectors of complex or real numbers. The state is represented as a StaticArrays.FieldVector of length 2 with complex BigFloat elements.\n\n\n\n\n\n","category":"type"},{"location":"#BlochSphereBigFloat.StereographicCoordinates","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.StereographicCoordinates","text":"mutable struct StereographicCoordinates{ST <: Union{PolarCoordinates, PlanarCoordinates, Complex}} <: Coordinates{BigFloat, 2}\n\nDefines a mutable struct StereographicCoordinates that represents coordinates in the stereographic projection of a sphere. It can store coordinates in different forms: as polar coordinates, planar coordinates, or as a complex number. The struct also includes a sign field sgnZ to indicate the hemisphere of the original point, independent of the pole of projection.\n\n\n\n\n\n","category":"type"},{"location":"#Base.convert-Union{Tuple{ST}, Tuple{Type{StereographicCoordinates{Complex}}, StereographicCoordinates{ST}}} where ST","page":"BlochSphereBigFloat.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{StereographicCoordinates{Complex}}, s::StereographicCoordinates{ST}) where ST\n\nConverts a StereographicCoordinates object s of type ST to a StereographicCoordinates{Complex} object.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{ST}, Tuple{Type{StereographicCoordinates{PlanarCoordinates}}, StereographicCoordinates{ST}}} where ST","page":"BlochSphereBigFloat.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{StereographicCoordinates{PlanarCoordinates}}, s::StereographicCoordinates{ST}) where ST\n\nConverts a StereographicCoordinates object s of type ST to a StereographicCoordinates{PlanarCoordinates} object.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{ST}, Tuple{Type{StereographicCoordinates{PolarCoordinates}}, StereographicCoordinates{ST}}} where ST","page":"BlochSphereBigFloat.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{StereographicCoordinates{PolarCoordinates}}, s::StereographicCoordinates{ST}) where ST\n\nConverts a StereographicCoordinates object s of type ST to a StereographicCoordinates{PolarCoordinates} object.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getproperty-Tuple{StereographicCoordinates, Symbol}","page":"BlochSphereBigFloat.jl Documentation","title":"Base.getproperty","text":"function Base.getproperty(p::StereographicCoordinates, i::Symbol)\n\nRetrieves the property i from the StereographicCoordinates object p. If i is :data or :sgnZ, it returns the corresponding field. If i is a property of the underlying data type, it retrieves that property. Otherwise, it raises an error.\n\n\n\n\n\n","category":"method"},{"location":"#Base.iterate-Union{Tuple{StereographicCoordinates{ST}}, Tuple{ST}, Tuple{StereographicCoordinates{ST}, Int64}} where ST<:Union{Complex, PlanarCoordinates, PolarCoordinates}","page":"BlochSphereBigFloat.jl Documentation","title":"Base.iterate","text":"function Base.iterate(p::StereographicCoordinates{ST}, state::Int64=1) where {ST <: Union{PolarCoordinates, PlanarCoordinates, Complex}}\n\nIterates over the StereographicCoordinates object p.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Union{Tuple{StereographicCoordinates{ST}}, Tuple{ST}} where ST<:Union{Complex, PlanarCoordinates, PolarCoordinates}","page":"BlochSphereBigFloat.jl Documentation","title":"Base.length","text":"function Base.length(p::StereographicCoordinates{ST}) where {ST <: Union{PolarCoordinates, PlanarCoordinates, Complex}}\n\nReturns the length of the StereographicCoordinates object p, which is 2 for complex coordinates and 3 for polar or planar coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#Base.propertynames-Tuple{StereographicCoordinates}","page":"BlochSphereBigFloat.jl Documentation","title":"Base.propertynames","text":"function Base.propertynames(p::StereographicCoordinates)\n\nReturns the property names of the StereographicCoordinates object p, including :data and :sgnZ, as well as the property names of the underlying data type.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, SingleQubitState}","page":"BlochSphereBigFloat.jl Documentation","title":"Base.show","text":"function Base.show(io::IO, s::SingleQubitState)\n\nDisplays the SingleQubitState in a human-readable format, showing the type and values of the state.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.BlochVec-Tuple{SingleQubitState}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.BlochVec","text":"function BlochVec(s::SingleQubitState)::SpatialCoordinates{BigFloat}\n\nCalculates the Bloch vector representation of a single qubit state s.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.Rx-Tuple{Any}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.Rx","text":"Rotation operator on ℂ² around x-axis (in Bloch picture) by angle `β`.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.Ry-Tuple{Any}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.Ry","text":"Rotation operator on ℂ² around y-axis (in Bloch picture) by angle `β`.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.Rz-Tuple{Any}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.Rz","text":"Rotation operator on ℂ² around z-axis (in Bloch picture) by angle `γ`.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.ep-Tuple{Any}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.ep","text":"ep(x::Vector) = exp(-im/2 * sum(x * P))\n\nCalculates the matrix exponential e^(-im/2 * ∑ xᵢ⋅Pauliᵢ) for a vector x where Pauli[X,Y,Z] are the Pauli matrices.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.interpolate_path","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.interpolate_path","text":"interpolate_path(state::SingleQubitState, ϕ::Real, Rot::Function, N::Int=50)\n\nInterpolates a path of N states starting from state by applying the single qubit operator Rot with parameter ϕ/N for N steps. The function returns a vector of SingleQubitState objects representing the interpolated states.\n\n\n\n\n\n","category":"function"},{"location":"#BlochSphereBigFloat.numdigits-Tuple{}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.numdigits","text":"numdigits()\n\nReturns the number of digits of the current precision for BigFloat numbers, which is determined by the machine epsilon. The precision can be adjusted using setprecision(BigFloat, num_bits) for num_bits bits.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.pBloch","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.pBloch","text":"function pBloch(ax, s::Vector{SingleQubitState}, arrow=true; alphamin=1, eyepos = false, kwargs...)\n\nPlots a vector of single qubit states s on the Bloch sphere in the 3D scene ax as Bloch vectors. See pBloch for a single state.\n\n\n\n\n\n","category":"function"},{"location":"#BlochSphereBigFloat.pBloch-2","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.pBloch","text":"function pBloch(ax, s::SingleQubitState, arrow=true; alphamin=1, eyepos = false, kwargs...)\n\nPlots a single qubit state s on the Bloch sphere in the 3D scene ax as a Bloch vector. If arrow is true, it plots an arrow representing the Bloch vector; otherwise, it plots a point. The alphamin parameter controls the minimum alpha transparency of the arrow or point based on the distance from the camera. kwargs get passed to the plotting function (e.g. arrows3d! or scatter!).\n\n\n\n\n\n","category":"function"},{"location":"#BlochSphereBigFloat.plot_axis_arrow-Tuple{Any, Any}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.plot_axis_arrow","text":"function plot_axis_arrow(ax, P_rot; linewidth=0.01, color=:blue)\n\nPlots an axis arrow in the 3D scene ax at the origin pointing in the direction of the vector P_rot.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.projection-Tuple{Type{SingleQubitState}, StereographicCoordinates}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.projection","text":"function projection(::Type{SingleQubitState}, s::StereographicCoordinates)\n\nProjects a point from StereographicCoordinates to SingleQubitState.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.projection-Tuple{Type{SpatialCoordinates}, StereographicCoordinates}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.projection","text":"function projection(::Type{SpatialCoordinates}, s::StereographicCoordinates)\n\nProjects a point from StereographicCoordinates to SpatialCoordinates.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.projection-Tuple{Type{SphereCoordinates}, StereographicCoordinates}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.projection","text":"function projection(::Type{SphereCoordinates}, s::StereographicCoordinates)\n\nProjects a point from StereographicCoordinates to SphereCoordinates.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.projection-Tuple{Type{StereographicCoordinates}, SingleQubitState}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.projection","text":"function projection(::Type{StereographicCoordinates}, point::SingleQubitState; proj=:north)\n\nProjects a point from SingleQubitState to StereographicCoordinates using the specified projection pole (proj). The proj argument can be one of :top, :north, :topdown, :n, :t, +1 for the northern hemisphere, or :bottom, :south, :bottomup, :s, :b, -1 for the southern hemisphere. The special cases :both and :abs will automatically determine the hemisphere based on the point's polar angle.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.projection-Tuple{Type{StereographicCoordinates}, SpatialCoordinates}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.projection","text":"function projection(::Type{StereographicCoordinates}, point::SpatialCoordinates; proj=:north)\n\nProjects a point from SpatialCoordinates to StereographicCoordinates using the specified projection pole (proj). The proj argument can be one of :top, :north, :topdown, :n, :t, +1 for the northern hemisphere, or :bottom, :south, :bottomup, :s, :b, -1 for the southern hemisphere. The special cases :both and :abs will automatically determine the hemisphere based on the point's polar angle.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.projection-Tuple{Type{StereographicCoordinates}, SphereCoordinates}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.projection","text":"function projection(::Type{StereographicCoordinates}, point::SphereCoordinates; proj=:north)\n\nProjects a point from SphereCoordinates to StereographicCoordinates using the specified projection pole (proj). The proj argument can be one of :top, :north, :topdown, :n, :t, +1 for the northern hemisphere, or :bottom, :south, :bottomup, :s, :b, -1 for the southern hemisphere. The special cases :both and :abs will automatically determine the hemisphere based on the point's polar angle.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.setup_blochplot-Tuple{}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.setup_blochplot","text":"function setup_blochplot(;size=(500,500), fig=false, eyepos = [3,3,2], show_axis=true, outlines_only=false, scenekw=(limits=Rect(-1,-1,-1,2,2,2),), _unusedkwargs...)\n\nSets up a 3D Bloch sphere plot with optional outlines instead of 3D mesh and camera controls.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.setup_doubleplot-Tuple{}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.setup_doubleplot","text":"function setup_doubleplot(;size=(1500, 1200))\n\nSets up a double plot with a Bloch sphere plot and a stereographic projection plot.\n\n\n\n\n\n","category":"method"},{"location":"#BlochSphereBigFloat.setup_tripleplot-Tuple{}","page":"BlochSphereBigFloat.jl Documentation","title":"BlochSphereBigFloat.setup_tripleplot","text":"function setup_tripleplot(;size=(1500, 1200))\n\nSets up a triple plot with a Bloch sphere plot, a stereographic projection plot for the north pole, and a stereographic projection plot for the south pole.\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#PulseSequenceRandomizedRotations-submodule","page":"PulseSequenceRandomizedRotations submodule","title":"PulseSequenceRandomizedRotations submodule","text":"","category":"section"},{"location":"PulseSequenceRandomizedRotations/","page":"PulseSequenceRandomizedRotations submodule","title":"PulseSequenceRandomizedRotations submodule","text":"Contains functions to animate and calculate states using pulse sequences with arbitrary x- and randomized z-rotations.","category":"page"},{"location":"PulseSequenceRandomizedRotations/#Usage","page":"PulseSequenceRandomizedRotations submodule","title":"Usage","text":"","category":"section"},{"location":"PulseSequenceRandomizedRotations/","page":"PulseSequenceRandomizedRotations submodule","title":"PulseSequenceRandomizedRotations submodule","text":"using BlochSphereBigFloat\nusing BlochSphereBigFloat.PulseSequenceRandomizedRotations","category":"page"},{"location":"PulseSequenceRandomizedRotations/#Index","page":"PulseSequenceRandomizedRotations submodule","title":"Index","text":"","category":"section"},{"location":"PulseSequenceRandomizedRotations/","page":"PulseSequenceRandomizedRotations submodule","title":"PulseSequenceRandomizedRotations submodule","text":"","category":"page"},{"location":"PulseSequenceRandomizedRotations/#API","page":"PulseSequenceRandomizedRotations submodule","title":"API","text":"","category":"section"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations","text":"submodule PulseSequenceRandomizedRotations\n\nContains functions to animate and calculate states using pulse sequences with arbitrary x- and randomized z-rotations.\n\n\n\n\n\n","category":"module"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.animate_sequence_path-Tuple{Vector{BigFloat}, Vector{Tuple{Symbol, BigFloat}}, Int64}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.animate_sequence_path","text":"function animate_sequence_path(ωs::Vector{BigFloat}, pulses::Vector{Tuple{Symbol, BigFloat}}, N::Int64; s_start=false, plot_trace=true, plot_step_trace=false, plot_arrow=false, fps=24, markersize=5, kwargs...)\n\nAnimates the path of a sequence of single qubit states on the Bloch sphere, given a vector of frequencies ωs and a sequence of pulses defined by pulses. Each pulse is either a rotation around the z-axis with frequency ωs[i] and duration t, or a rotation around the x-axis with angle t. The initial state is given by s_start, and the number of steps for the maximal pulse is defined by N.\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.overlap_by_sequence-Tuple{Vector{BigFloat}, Vector{Tuple{Symbol, BigFloat}}}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.overlap_by_sequence","text":"function overlap_by_sequence(ωs::Vector{BigFloat}, pulses::Vector{Tuple{Symbol, BigFloat}}; s_start::SingleQubitState=SingleQubitState(1,1), s_target::SingleQubitState=SingleQubitState(1,0))\n\nCalculates the overlap of the states obtained from states_by_sequence with a target state s_target. The overlap is computed as the squared absolute value of the inner product between each state and the target state.\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.overlap_by_sequence_threaded-Tuple{Vector{BigFloat}, Vector{Tuple{Symbol, BigFloat}}}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.overlap_by_sequence_threaded","text":"function overlap_by_sequence_threaded(ωs::Vector{BigFloat}, pulses::Vector{Tuple{Symbol, BigFloat}}; s_start::SingleQubitState=SingleQubitState(1,1), s_target::SingleQubitState=SingleQubitState(1,0))\n\nCalculates the overlap of the states obtained from states_by_sequence_threaded with a target state s_target, using multithreading for performance. The overlap is computed as the squared absolute value of the inner product between each state and the target state.\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.plot_sequence_path-Tuple{Vector{BigFloat}, Vector{Tuple{Symbol, BigFloat}}, Int64}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.plot_sequence_path","text":"function plot_sequence_path(ωs::Vector{BigFloat}, pulses::Vector{Tuple{Symbol, BigFloat}}, N::Int64; s_start=SingleQubitState([1,1]), pBlochargs=(colormap=:viridis,), kwargs...)\n\nPlots the path of a sequence of single qubit states on the Bloch sphere, given a vector of frequencies ωs and a sequence of pulses defined by pulses. Each pulse is either a rotation around the z-axis with frequency ωs[i] and duration t, or a rotation around the x-axis with angle t. The initial state is given by s_start, and the number of steps for each pulse is defined by N.\n\nFor a mutable version, use plot_sequence_path!.\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.plot_sequence_path_triple-Tuple{Vector{BigFloat}, Vector{Tuple{Symbol, BigFloat}}, Int64}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.plot_sequence_path_triple","text":"function plot_sequence_path_triple(ωs::Vector{BigFloat}, pulses::Vector{Tuple{Symbol, BigFloat}}, N::Int64; kwargs...)\n\nLike plot_sequence_path, but as a triple plot (Bloch sphere, stereographic projection north pole, stereographic projection south pole).\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.seq2vals-Tuple{Vector{Tuple{Symbol, BigFloat}}}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.seq2vals","text":"function seq2vals(sequence::Vector{Tuple{Symbol, BigFloat}})::Vector{BigFloat}\n\nConverts a sequence of tuples (direction, value) into a vector of BigFloat values, extracting only the values from the tuples.\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.states_by_sequence-Tuple{Vector{BigFloat}, Vector{Tuple{Symbol, BigFloat}}}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.states_by_sequence","text":"function states_by_sequence(ωs::Vector{BigFloat}, pulses::Vector{Tuple{Symbol, BigFloat}}; s_start::SingleQubitState=SingleQubitState(1,1))\n\nCalculates the states of a single qubit after applying a sequence of pulses defined by pulses to the initial state s_start. Each pulse is either a rotation around the z-axis with frequency ωs[i] and duration t, or a rotation around the x-axis with angle t.\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.states_by_sequence_threaded-Tuple{Vector{BigFloat}, Vector{Tuple{Symbol, BigFloat}}}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.states_by_sequence_threaded","text":"function states_by_sequence_threaded(ωs::Vector{BigFloat}, pulses::Vector{Tuple{Symbol, BigFloat}}; s_start::SingleQubitState=SingleQubitState(1,1))\n\nCalculates the states of a single qubit after applying a sequence of pulses defined by pulses to the initial state s_start, using multithreading for performance. Each pulse is either a rotation around the z-axis with frequency ωs[i] and duration t, or a rotation around the x-axis with angle t.\n\n\n\n\n\n","category":"method"},{"location":"PulseSequenceRandomizedRotations/#BlochSphereBigFloat.PulseSequenceRandomizedRotations.vals2sequence-Tuple{Vector{BigFloat}}","page":"PulseSequenceRandomizedRotations submodule","title":"BlochSphereBigFloat.PulseSequenceRandomizedRotations.vals2sequence","text":"function vals2sequence(vals::Vector{BigFloat})::Vector{Tuple{Symbol, BigFloat}}\n\nConverts a vector of BigFloat values into a sequence of tuples, alternating between :z and :x directions. The length of the input vector must be even.\n\n\n\n\n\n","category":"method"}]
}
